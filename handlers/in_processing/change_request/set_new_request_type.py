from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from data import all_emoji
from data import sticker
from keyboards import create_kb_chosen_request
from keyboards import create_kb_coustom_main_menu
from loader import bot, dp, sheet
from states import Processing
from utils import get_data_chosen_request
from utils import notify_in_group_chat
from utils import notify_someone


@dp.callback_query_handler(state=Processing.new_request_type)
async def set_date_from_buttons(call:CallbackQuery, state:FSMContext):
    '''
    > –≤—ã–¥–∞—á–∞ –≤ –æ—Ñ–∏—Å–µ         issuing_office
    > –ø—Ä–∏–µ–º –∫—ç—à–∞             cash_recive
    > –¥–æ—Å—Ç–∞–≤–∫–∞               delivery
    > –æ–±–º–µ–Ω                  exchange
    > –∫—ç—à–∏–Ω                  cash_in
    > —Å–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç          cash_out
    > –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ     back_to_request
    > –æ—Ç–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  back__main_menu
    '''
    await call.answer()
    await call.message.delete()

    if call.data == 'back_to_request':
        data_state = await state.get_data()
        current_requests = data_state['current_requests']
        chosen_request = data_state['chosen_request']
        request_id = chosen_request[2]

        for request in current_requests:

            if request_id == request[2]:
                await state.update_data(chosen_request=request)

                break

        data_state = await state.get_data()
        chosen_request = data_state['chosen_request']
        text = get_data_chosen_request(chosen_request)

        await call.message.answer (
            text=text,
            reply_markup=create_kb_chosen_request(request)
            # > –ø—Ä–∏–Ω—è—Ç–æ —á–∞—Å—Ç–∏—á–Ω–æ (–¥–ª—è –ø—Ä–∏–µ–º–∞ –∫—ç—à–∞, —Å–Ω—è—Ç–∏—è —Å –∫–∞—Ä—Ç, –æ–±–º–µ–Ω–∞)
            # > –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ –≤—ã–¥–∞—á—É (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏, –∫—ç—à–∏–Ω–∞, –æ–±–º–µ–Ω–∞)
            # > –∑–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
            # > —Å–æ–æ–±—â–µ–Ω–∏–µ
            # > –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
            # > –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
            # > –Ω–∞–∑–∞–¥ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )   
        await Processing.enter_chosen_request_menu.set()

        return

    elif call.data == 'back__main_menu':
        await call.message.answer (
            text='–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é "–í –†–ê–ë–û–¢–ï". –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
            reply_markup=create_kb_coustom_main_menu(call.message.chat.id)
        )
        await state.finish()
        
        return

    elif call.data == 'issuing_office':
        new_request_type = '–≤—ã–¥–∞—á–∞ –≤ –æ—Ñ–∏—Å–µ'
    
    elif call.data == 'cash_recive':
        new_request_type = '–ø—Ä–∏–µ–º –∫—ç—à–∞'

    elif call.data == 'delivery':
        new_request_type = '–¥–æ—Å—Ç–∞–≤–∫–∞'

    elif call.data == 'exchange':
        new_request_type = '–æ–±–º–µ–Ω'

    elif call.data == 'cash_in':
        new_request_type = '–∫—ç—à–∏–Ω'
    
    elif call.data == 'cash_out':
        new_request_type = '—Å–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç'
    
    data_state = await state.get_data()
    chosen_request = data_state['chosen_request']
    request_id = chosen_request[2]
    request_type_emoji = all_emoji[chosen_request[3]]
    persone = all_emoji['–ø–µ—Ä—Å–æ–Ω–∞']
    username = call.message.chat.username

    text = f'{request_type_emoji} #N{request_id}\n–∏–∑–º–µ–Ω–µ–Ω —Ç–∏–ø –∑–∞—è–≤–∫–∏\n{chosen_request[3]} üëâ {new_request_type}\n{persone} @{username}'
    chosen_request[3] = new_request_type
    chosen_request[5] = '0'
    chosen_request[6] = '0'
    chosen_request[7] = '0'
    chosen_request[10] = username
    chosen_request[11] = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
    chosen_request[12] = '0'
    chosen_request[13] = '0'
    chosen_request[14] = '0'
    chosen_request[16] = '0'
    
    try:
        result = await call.message.answer_sticker (
            sticker['go_to_table']
        )
        sheet.replace_row(chosen_request)

    except Exception as e:
        print(e)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=result.message_id)
        await call.message.answer_sticker (
            sticker['not_connection']
        )
        await call.message.answer (
            text='–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ–π',
            reply_markup=create_kb_coustom_main_menu(call.message.chat.id)
        )
        await state.finish()
        
        return

    await bot.delete_message(chat_id=call.message.chat.id, message_id=result.message_id)

    await call.message.answer (
        text='–¢–∏–ø –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω',
        reply_markup=create_kb_coustom_main_menu(call.message.chat.id)
    )

    await notify_someone(text, 'admin', 'changer', 'executor')
    await notify_in_group_chat(text)

    await state.finish()
